pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
game = {
    states = {
        splash = 1,
        game = 2,
        gameover = 3
    },
    state = 1,
    score = 0,
    game_over = false,
    obstacle_count = 0,
    obstacle_timer = 0,
    obstacle_interval = 60,
    debug = true,
    current_music = 0
}

player = {
    x = 16,
    y = 88,
    width = 8,
    height = 8,
    dy = 0,
    jump_strength = -3,
    gravity = 0.2,
    jump_count = 0,
    max_jumps = 1,
    double_jump_enabled = false,
    double_jump_timer = 0,
    double_jump_duration = 300,
    sprite = 1,
    anim_timer = 0,
    anim_speed = 0.2,
    anim_frames = {0,1,2,3,4},
    jump_frames = {5},
    state = "walking"
}

obstacles = {}
power_ups = {}
screen_size = 128
ground_offset = 0

function _init()
    cls()
    game.state = game.states.splash
end

function _init_game()
    player.y = 88
    player.dy = 0
    player.jump_count = 0
    obstacles = {}
    game.score = 0
    game.game_over = false
    player.double_jump_enabled = false
    player.double_jump_timer = 0
    player.max_jumps = 1
    game.obstacle_count = 0
end

function _update60()
    if game.state == game.states.splash then   
        update_splash()
    elseif game.state == game.states.game then
        update_game() 
    elseif game.state == game.states.gameover then
        update_gameover()
    end
end

function _draw()
    cls()
    if game.debug then
        draw_border()
        draw_debug_info()
    end
    if game.state == game.states.splash then   
        draw_splash()
    elseif game.state == game.states.game then
        draw_game()
        if game.debug then
            draw_debug_info()
        end
    elseif game.state == game.states.gameover then
        draw_gameover()
    end
end

function add_obstacle()
    local obstacle_y = 88
    local obstacle_height = 8
    local obstacle_width = 8
    local obstacle_dy = 0

    local random_value = rnd(1)
    local level = get_current_level()

    if level == 1 then
        obstacle_height = 8
        obstacle_width = 8
    elseif level == 2 then
        if random_value < 0.1 then
            obstacle_height = 16
        elseif random_value < 0.2 then
            obstacle_width = 16
        end
    elseif level == 3 then
        if random_value < 0.1 then
            obstacle_height = 16
            obstacle_width = 16
        elseif random_value < 0.3 then
            obstacle_height = 16
        elseif random_value < 0.5 then
            obstacle_width = 16
        end
    elseif level == 4 then
        if random_value < 0.1 then
            obstacle_height = 16
            obstacle_width = 16
        elseif random_value < 0.3 then
            obstacle_height = 16
        elseif random_value < 0.5 then
            obstacle_width = 16
        end
    elseif level == 5 then
        obstacle_dy = 0.7
        local starting_height = flr(rnd(2)) + 1
        if(starting_height) == 1 then
            obstacle_y = 80
        else
            obstacle_y = 60
        end 
        if random_value < 0.5 then
            obstacle_height = 16
        end
    else
        if random_value < 0.05 then
            obstacle_height = 16
            obstacle_width = 16
        elseif random_value < 0.25 then
            obstacle_height = 16
        elseif random_value < 0.45 then
            obstacle_width = 16
        end
    end

    add(obstacles, {x = 128, y = obstacle_y - obstacle_height + 8, width = obstacle_width, height = obstacle_height, dy = obstacle_dy})
    game.obstacle_count = game.obstacle_count + 1
end

function add_power_up()
    local power_up_y = 70 - rnd(10)
    add(power_ups, {x = 128, y = power_up_y, width = 8, height = 8})
end

function update_game()
    if not game.game_over then
        if game.current_music ~= 13 then
          stop_music()
          start_music(13)
          game.current_music = 13
        end
        update_player()
        update_obstacles()
        update_power_ups()
        check_collisions()
        update_ground()
    else
        if btnp(4) then
            _init()
        end
    end
end

function update_splash()
    if game.current_music ~= 6 then
      stop_music()
      start_music(6)
      game.current_music = 6
    end
    if btnp(4) then 
        change_state(game.states.game)
    end
end

function update_player()
    if btnp(4) and player.jump_count < player.max_jumps then
        player.dy = player.jump_strength
        player.jump_count = player.jump_count + 1
        player.state = "jumping"
        player.anim_timer = 0
    end

    player.dy = player.dy + player.gravity
    player.y = player.y + player.dy

    if player.y > 88 then
        player.y = 88
        player.dy = 0
        player.jump_count = 0
        player.state = "walking"
        -- do not reset anim_timer here
    end
end

function update_obstacles()
    game.obstacle_timer = game.obstacle_timer + 1
    if game.obstacle_timer > game.obstacle_interval then
        add_obstacle()
        if rnd(1) < 0.1 then
            add_power_up()
        end
        game.obstacle_timer = 0
        game.obstacle_interval = 30 + rnd(60)
    end

    for obstacle in all(obstacles) do
        obstacle.x = obstacle.x - 2
        if get_current_level() == 5 then
            obstacle.y = obstacle.y + obstacle.dy
            if obstacle.y < 50 or obstacle.y > 88 then
                obstacle.dy = -obstacle.dy
            end
        end
        if obstacle.x < -8 then
            del(obstacles, obstacle)
            game.score = game.score + 1
        end
    end
end

function update_power_ups()
    for power_up in all(power_ups) do
        power_up.x = power_up.x - 2
        if power_up.x < -8 then
            del(power_ups, power_up)
        elseif player.x < power_up.x + power_up.width and
               player.x + player.width > power_up.x and
               player.y < power_up.y + power_up.height and
               player.y + player.height > power_up.y then
            collect_power_up()
            del(power_ups, power_up)
        end
    end
    decrease_power_up_timer()
end

function update_ground()
    ground_offset = (ground_offset - 2) % screen_size
end

function update_gameover()
    if btnp(4) then
        change_state(game.states.splash)
    end
end

function draw_game()
    draw_ground()
    draw_player()
    draw_obstacles()
    draw_power_ups()
    draw_score()
    draw_power_up_timer()
end

function draw_ground()
    for i = 0, screen_size / 8 do
        local x = (i * 8 + ground_offset) % screen_size
        line(x, 97, x + 4, 97, 5)
    end
end

function draw_player()
    player.anim_timer = player.anim_timer + player.anim_speed
    local frames = player.anim_frames

    if player.state == "jumping" then
        frames = player.jump_frames
    end

    if player.anim_timer >= #frames then
        player.anim_timer = 0
    end

    player.sprite = frames[flr(player.anim_timer) + 1]
    spr(player.sprite, player.x, player.y)
end

function draw_obstacles()
    for obstacle in all(obstacles) do
        rectfill(obstacle.x, obstacle.y, obstacle.x + obstacle.width, obstacle.y + obstacle.height, 9)
    end
end

function draw_power_ups()
    for power_up in all(power_ups) do
        spr(16, power_up.x, power_up.y)
    end
end

function draw_score()
    print("score: "..game.score, 1, 1, 7)
end

function draw_power_up_timer()
    if player.double_jump_enabled then
        local timer_text = "double jump: " ..convert_frames_to_seconds(player.double_jump_timer)
        print(timer_text, screen_size - (#timer_text * 4) - 1, 1, 12)
    end
end

function draw_gameover()
    print("game over!", 48, 20, 8)
    print("press z to continue", 32, 30, 8)
end

function draw_splash() 
    rectfill(0, 0, screen_size, screen_size, 11)
    local text = "press z to start"
    write(text, text_x_pos(text), 52, 7)
end

function draw_border()
    rect(0, 0, screen_size - 1, screen_size - 1, 8)
end

function draw_debug_info()
    print("level: "..get_current_level(), 1, 10, 11)
end

function handle_player_input()
    if btnp(4) and player.jump_count < player.max_jumps then
        player.dy = player.jump_strength
        player.jump_count = player.jump_count + 1
        player.state = "jumping"
        player.anim_timer = 0
   end
end

function apply_gravity()
    player.dy = player.dy + player.gravity
    player.y = player.y + player.dy

    if player.y > 88 then
        player.y = 88
        player.dy = 0
        player.jump_count = 0
        player.state = "walking"
        player.anim_timer = 0
    end
end

function check_collisions()
    for obstacle in all(obstacles) do
        if player.x < obstacle.x + obstacle.width and
           player.x + player.width > obstacle.x and
           player.y < obstacle.y + obstacle.height and
           player.y + player.height > obstacle.y then
            game.game_over = true
            change_state(game.states.gameover)
        end
    end
end

function get_current_level()
    if game.obstacle_count < 5 then
        return 1
    elseif game.obstacle_count < 15 then
        return 2
    elseif game.obstacle_count < 30 then
        return 3
    elseif game.obstacle_count < 50 then
        return 4
    elseif game.obstacle_count < 75 then
        return 5
    else
        return 6
    end
end

function collect_power_up()
    player.double_jump_enabled = true
    player.double_jump_timer = player.double_jump_duration
    player.max_jumps = 2
end

function decrease_power_up_timer()
    if player.double_jump_enabled then
        draw_power_up_timer()
        player.double_jump_timer = player.double_jump_timer - 1
        if player.double_jump_timer <= 0 then
            player.double_jump_enabled = false
            player.max_jumps = 1
        end
    end
end

function change_state(new_state)
    game.state = new_state
    if game.state == game.states.game then
        _init_game()
    end
end

function convert_frames_to_seconds(frames)
    return ceil(frames / 60)
end

function text_x_pos(text)
    local letter_width = 4
    local width = #text * letter_width
    if width > screen_size then 
        return 0 
    end 
    return screen_size / 2 - flr(width / 2)
end

function write(text, x, y, color) 
    for i = 0, 2 do
        for j = 0, 2 do
            print(text, x + i, y + j, 0)
        end
    end
    print(text, x + 1, y + 1, color)
end 

function mod_zero(a, b)
   return a - flr(a / b) * b == 0
end

function start_music(n)
 if (not music_playing) then
  music(n, 1000) music_playing=true
 end
end

function stop_music()
 music(-1, 1000) music_playing=false
end
__gfx__
00000000000000000088888000888880000000000088888000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888880008888800844444008444440008888808044444000000000000000000000000000000000000000000000000000000000000000000000000000000000
08444440084444400841441008414410084444408041441000000000000000000000000000000000000000000000000000000000000000000000000000000000
08414410084144100824442088244420084144100824442000000000000000000000000000000000000000000000000000000000000000000000000000000000
08244420082444208002220000022200082444200002220000000000000000000000000000000000000000000000000000000000000000000000000000000000
80022200800222000009994000499900800222000049994000000000000000000000000000000000000000000000000000000000000000000000000000000000
00099900000999400040000000000040004999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00040400000400000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00042000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0066dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
061111d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6888222d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
62222225000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0d555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0000002025350203501b35017350123500b3500335000350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0108080a1307014070180701806018050180401803018020180141801500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010b0809245701d5701c5701c5601c5501c5401c5301c5201c5100050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500
010200280c31500000000000000000000000000f2250000000000000000c3000c415000000000000000000000c3000000000000000000c30000000000000741500000000000c2150000000000000000c30000000
010300280000000000246250000000000000000000000000246150000000000000000c30018625000000000018000180002430018000180001800024300180001800018000000000000000000000000000000000
011000010017000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01090004180701a07015070160700c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c0000c000000000000000000000000000000000
0109000418070160701307011070295052650529505265052d505295052950526505225051f5051d505215052e5052b50528505245052d5052d5052850528505265052e5052b5052850524505215051d50521505
0114000020724200251c7241c0251972419525157243951520724200251c7241c0251952219025147241502121724210251c7241c0161972419025237241702521724395151c7241c02519724195251772717025
011400000c043090552071409055246151971315555090550c043090551971309555207142461509055155550c043060552071406055246151671306055125550c04306055167130655520714246150605515545
011400000c043021551e7140205524615197350e7550c04302155020551e7241e7250255524615020550e55501155010551e7140c04324615167130b0350d0550c04301155197240b55520714246150105515545
0114000020714200151c7141c01525732287321571439515207142a7322c7312c7222c71219015147142a73228732287351c7241e7321e7321e725237141701521714395151c7241c02519724195251772617025
0114000020714200151c7141c01525732287321571439515207142a7322c7312c7222c71219015147142f7322d7322d7352d724217322173221725237141701521714395151c7241c02519724195251772617025
0116002006045061450d045061450d537061450d045061450d045060450614501145065370d14504045041450b045041450b537041450b045041450b0450b145040450b145045360b1450b045041450b0450b145
010b00201e4321e4221f4161e4161c4221c4121e4321e4221e4121e4121f4161e4161c4321c4221c4121c4121c4121c4121c4121c4121c4121c4121c4121c4121c4121c4121c4121c41510115101051011510105
011600001e4301e4221e4121e4150652500505065251a0141a015065251a0150652500505065251901419015045251701404525005050452500505045251e0141e015045251e0140452504525005050452504525
010b00201e4321e4261f4161e4161c4321c4321a4351c4351e4351f43521435234352643528435254322542219432194222543225422264262542623432234222143221422234372342625430234302143520435
01160000190141901506525135000652500505065251a0141a015065251a0150652506404065251901419015045251701404525005050452500505045251e0141e015045251e0140452504525005050452504525
010e000005445054453f51511425111150f4250c42511115034450344511115182451b245182451d2451111501445014452024511115111152024511115202450344520245224452324522445202361d4451b245
010e00000c0430c43511115184453c6151424511245054350c0430a4253f515134253c6151342518425054350c043111151b4253f5153c6151b4253f5151b4250c0231b4351d2351e4353c6151d2351843516235
010e00000144520245224452324522435202451d44503445034050344503445182451b445182451d445111150044520245224452324522445202361d4451b245014450144511115182451b445182451d44511115
010e00000c0431b4351d2351e4353c6151d235184350c04317200131153f515134253c6151342518425014350c0331b4351d2351e4353c6151d235184351623511115111153f515134253c615134251842500445
010e0000004450044520445111151d115204451d1152911501445014452c445111151d1152c4451d11529115034452c2452e4452f2452e4452c2452944503445044452c2452e4452f2452e4452c236294451b211
010e00000c0430c0431b4451b2153c6151b4451b2150f4150c0430c04327445272153c61527445272151b4150c0431b4351d2351e4353c6151d235184350c0430c0431b4351d2351e4353c6151d2351843500445
010d00000c0430444504245134353f6150444513235044450c0431343513235044453f6150444513235134350c0430444504245134353f6150444513235044450c0431343513235044453f615044451323513435
010d000028545234352d2252b5452a4352b2252f54532235395203724536530374253b2403953537420342453653034225325452f2302d5252b2402a4352b520284452623623520214451f23023525284202a235
010d00002b5452a4352822523545214351f2251e5451c4352b225235452a435232252d5452b4352a2252b545284352a225285452643523225215451f4351c2251a545174351e2251a5451c4351e2251f54523225
010d00000c0430044500245104353f6150044510235004450c0430043500235104453f6150044510235104350c0430044500245104353f6150044510235004450c0431043510235004453f615004451023500445
010d00000c0430244502245124353f6150244512235024450c0431243512235024453f6150244502245124350c0430244502245124353f6150244512235024450c0430243512235024453f615124450223512435
010d00002b5452a44528245235452b5352a43528535235352b5252a02528525235252b0252a02528725237252b0252a02528725237251f7251e7251c725177251f7151e7151c715177151371512715107150b715
010c00200c0330c225004203a314004353c3153c3140c033306150c0330043000430002253e5153e5150c1430c0430f234034351b31303435370143751237015306153e5150333003430032251b3130c0331b313
010c00200c03312225064203a314064353c3153c3140c033306150c0330643006430062253e5153e5150c1430c04311234054351b313054353a0142e5123a015306153e51503335054351322605426033351b313
010c00202201524215244102431422415243152431422315223152401522410242142221524415245152421522315222142441524316224152401424512220152451524514223152441522217244162431522315
010c0000224002b4102e41030410304103041033410304103041030212294102b2102e410302102b410272102a4102a4122a41227410274102741025411274112741027410274102721027412272122741227212
010c00002a4102a4122a412274102741027412272122741527400254102a2102e4102b2102a416252102a4102741027412274122441024212244122241124411244102441024410244102421024412182110c411
011100000c343003550034500335306250a3300a4320a3320c343033550334503335306251333013432133320c343073550734507335306251633016432163320c343033550334503335306251b3301b4321b332
01110000162251b425222253751227425375122b5112e2251b4352b2402944027240224471f440244422443224422244253a512222253a523274252e2253a425162351b4352e4302e23222431222302243222232
011100000c343053550534505335306250f3301f4260f3320c343033550334503335306251332616325133320c343073550734507335306251633026426163320c343033550334503335306250f3261b3150f322
011100001d22522425272253f51227425375122b5112e225322403323133222304403043030422375112e44237442372322c2412c2322c2222c4202c4153a425162351b4352b4402b4322b220224402243222222
011100001f2401f4301f2201f21527425375122b5112e225162251b5112e2253a5122b425375122b5112e225162251b425225133021033410375223341027221162251b425222253751227425373112b3112e325
01110000182251f511242233c5122b425335122b5112e225162251b5112e2253a5122b425375122b5112e225162251b425225133021033410375223341027221162251b425222253751227425373112b3112e325
011100000f22522425272253f51227425375122b5112e2252724027232272222444024430244222b511224422b4422b23220241202322023220420204153a425162351b4351f4401f4321f2201d4401d4321d222
017800000c8310c8310c8300c8300c8300c8300c8300c8300c8300c8300c8300c8300c8300c8300c8300c83018831188301883018830188301883018830188302482124820248202482024820248202482024820
01780000269442693026920185251870007515075140751507524000002494424930249201d5141d7000c5150c5142951500000000002b515000001d5141d5150a5340a5350a5340a5101a7241a7250a0250a014
017800000071400725007340074500734007250071400725007240071500000057340574505734057250571405725057340574503734037250371403725037340374503734037250371403725037340372503704
017800000a0041f714219242192224a3424a3224a25265151a5141a5150000026914269221ba441ba401ba450c5140c5250c5340c545000001f9441f9401f945225151f5241f51522a1022a2222a352b7242b715
0110002005b3008b2009b100ab2009b3008b2006b1002b2001b3006b2006b1003b2002b3003b2005b1007b2008b3009b200ab100ab200ab3009b2008b1007b2005b3003b2002b1002b2002b3002b2004b1007b20
0118042000c160cc160cc1600c1600c1600c160cc160cc160cc1600c1600c160cc160cc160cc1600c1600c160cc1600c1600c1600c160cc160cc160cc1600c160cc1600c160cc160cc1600c160cc160cc1605c16
012000200cb100fb2010b3011b4010b300fb200db1009b2008b300db400db300ab2009b100ab200cb300eb400fb3010b2011b1011b2011b3010b400fb300eb200cb100ab2015b3015b4015b3015b200bb100eb20
012c002000000000000000000000000000000000000000001371413710137101371015714157101571015712137141871418710187101871018710187101871018715187021a7141c7111c7101c7101c7101c710
012800001c7101f7141f7101f7101f7101f710157141571015710157101571015710157101571215715000001c7141c7101c7101c7101c7101f7141f7101f7101f7101f712157141571015710157101571015710
012800001571015715000001f7141c7141c7101c7101c7101c7101c71215714137111371013710137101371013710137121871418710187101871018710187101871018710187101871218715187001870018705
012000000dd550dd450dd350dd251074510735107251071500c4517d4517d3517d2517d1517d1510745107350dd550dd450dd350dd251074510735107251071500c4417d4517d3517d2517d1517d150dd150dd25
011d0c201071519d4519d3519d2519d151004510035100251001517d450f7250f7250f7150f71510715107151071519d2519d2519d1519d150b0150b0250b7250b0150b7150b71517d2517d250f7250f7250f715
0120000012d5512d4512d3512d251574515735157251571500c4510d4510d3510d2510d1510d15157451573512d5512d4512d3512d25157451573500c44157251571519d4519d3519d2519d1519d150dd150dd25
011d0c20107151ed251ed251ed251ed151502515025150151501517d25147251471514715147151571515715157151ed251ed251ed151ed1515015150251572515015157151571519d2519d250f7250f7250f715
0120000019d4519d350dd2501d451404014030147221471223d2523d350bd250bd451504015030157221571219d4519d350dd2501d451704019030197221971223d2523d350bd250bd451c0401e0301e7221e712
012000001ed451ed3512d2506d452104021030217222171228d3528d2528d1520040200421e0301e7221e7121ed451ed3512d2506d452104021030257222571228d4528d3528d2528d151c0301e0201e7121e712
0112000024e4524e3521f251ff351ff451de3524f2524f3518e451de351fe251d73018e251de351fe451d7321ff4521f3524f252973029e252be352ee4524e3524e2524e3521f451ff351ff251de352473224f35
0112000024e2524e35219451ff352192524e3524e4524f3526f2526f351fe451d73232f4532f352be25297322bf252bf352df253573235e2537e353ae4530e3530e2530e352df452bf352bf2529e253073230f35
011200002de252de352af4528f3528f2526e352df452df3521e2526e3528e452673221e3526e2528e352673228f252af352df253273232e3534e2537e352de252de352de252af3528f2528f3526e252d7322df35
011200000a0550a0350a0250a0550a0350a0250a0550a0350a0250a0550a035050250a0550a0350a0250a0550a035050250a0550a0350a0250a0550a035050250a0550a035050250a0550a035050250a0550a035
011200000505505035050250505505035050250505505035050250505505035000250505505035050250505505035000250505505035050250505505035000250505505035000250505505035000250505505035
012000001885007035070250705507035070250705507035070250705507035020250705507035070250705502035020550205502035020250205502035090250205502035090250205502035090250205502035
__music__
00 08094344
00 080a4344
00 0b094344
00 0c0a4344
00 0b094344
02 0c0a4344
01 12134344
00 12134344
00 12134344
00 12134344
00 14154344
00 14154344
02 16174344
01 18424344
00 1b424344
00 1c424344
00 18424344
00 181a4344
00 1b1a4344
00 1c194344
02 181d4344
00 1e424344
00 1f424344
01 1e204344
00 1f204344
00 1e204344
00 1f204344
00 1e214344
00 1f224344
00 1e214344
02 1f224344
00 23424344
00 23424344
01 23244344
00 23244344
00 25294344
00 25264344
00 23274344
02 23284344
03 2a2b2c2d
01 2e2f3031
00 2e2f3032
02 2e2f3033
01 34354344
00 34354344
00 36374344
00 34384344
00 34384344
02 36394344
00 0d117f44
01 0d117f44
00 0d0e7f44
00 0d0e7f44
00 0d107f44
00 0d107f44
02 0d0f7f44
01 3d3a4344
00 3e3a4344
00 3d3b4344
00 3e3a4344
00 3f3c5344
02 3f3c5344
00 7e7f5344
00 7e7f5344

